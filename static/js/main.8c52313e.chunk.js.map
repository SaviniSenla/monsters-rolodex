{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAACC,GACjB,OAAO,sBAAKC,UAAW,iBAAhB,UACH,qBAAKC,IAAK,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACvB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SACHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,UCJpBM,G,YAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACpC,OAAO,uBAAOZ,UAAU,SACVa,KAAO,SACPF,YAAeA,EACfG,SAAYF,MCkCfG,E,kDAlCb,aAAe,IAAD,8BACZ,gBAYFH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvC,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAY,IAJF,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAO3E,WAAS,IAAD,EAC2BC,KAAKN,MAA7Bb,EADH,EACGA,SAASU,EADZ,EACYA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpD,OACI,sBAAK9B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWW,YAAa,iBACfC,aAAce,KAAKf,eAE5B,cAAC,EAAD,CAAUJ,SAAYoB,W,GA9BlBI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8c52313e.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.style.css'\n\nexport const Card = (props) => {\n    return <div className= 'card-container' >\n        <img alt= 'monster' src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n     </div>\n};","import React from \"react\";\nimport './card-list.style.css'\nimport {Card} from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    return <div className='card-list'>{\n        props.monsters.map(monster=>(\n            <Card key = {monster.id} monster = {monster}/>\n                )\n            )\n    }</div>\n};","import React from \"react\";\nimport './search-box.style.css'\n\nexport const SearchBox = ({placeholder, handleChange})=>{\n    return <input className='search'\n                  type = 'search'\n                  placeholder = {placeholder}\n                  onChange = {handleChange}\n    />\n}","import React from 'react';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport './App.css';\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters:[],\n      searchField:''\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response=>response.json()).then(users=>this.setState({monsters:users}))\n  }\n\n  handleChange = (e) => {\n      this.setState({searchField: e.target.value})\n  }\n\n  render(){\n      const {monsters,searchField} = this.state;\n      const filteredMonsters = monsters.filter(monster=>\n          monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n      return (\n          <div className=\"App\">\n              <h1>Monsters Rolodex</h1>\n              <SearchBox placeholder ='search monster'\n                       handleChange={this.handleChange}\n              />\n              <CardList monsters = {filteredMonsters}/>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}